public class LinkedList_12 {
    public int val;
    public LinkedList_12 node;

    public LinkedList_12(int x){
        this.val=x;
        this.node=null;
    }

    @Override
    public String toString() {
        return "Loop starts at node with value: " + val;
    }

    public static LinkedList_12 Loop_starting_point(LinkedList_12 head){
        LinkedList_12 slow=head;
        LinkedList_12 fast=head;

        while (fast!= null && fast.node!=null) {
            slow=slow.node;
            fast=fast.node.node;
            if(slow==fast){
                fast=head;
                while (fast != slow) {
                    slow=slow.node;
                    fast=fast.node;
                }
                return slow;
            }
        }
        return null;
    }


    /*public static LinkedList_12 Loop_starting_point(LinkedList_12 head){
        HashSet<LinkedList_12> visited = new HashSet<>();
        LinkedList_12 current = head;

        while (current != null) {
            if (visited.contains(current)) {
                return current;
            }
            visited.add(current);
            current = current.node;
        }
        return null;
    }*/


    public static void main(String[] args) {
        LinkedList_12 l1=new LinkedList_12(6);
        LinkedList_12 l2=new LinkedList_12(8);
        LinkedList_12 l3=new LinkedList_12(3);
        LinkedList_12 l4=new LinkedList_12(7);
        LinkedList_12 l5=new LinkedList_12(1);

        l1.node=l2;
        l2.node=l3;
        l3.node=l4;
        l4.node=l5;
        l5.node=l2;

        LinkedList_12 result=Loop_starting_point(l1);
        System.out.println(result);
    }
}

//Time Complexity: O(n) — each pointer traverses at most n nodes.
//Space Complexity: O(1) — uses only two pointers, no extra space.
